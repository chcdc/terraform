---
- hosts: master
  become: true
  vars:
    sudoers:
      - ubuntu
  tasks:
    - name: "update hostnames"
      hostname:
        name: "{{ hostname }}"

    - name: Make sure we have a 'kube' group
      group:
        name: kube
        state: present

    - name: Allow 'kube' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%kube'
        line: '%kube ALL=(ALL) NOPASSWD: ALL'
        validate: visudo -cf %s

    - name: Add sudoers users to kube group
      user:
        name: "{{ item }}"
        groups: kube
        append: yes
      with_items: "{{ sudoers }}"

    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install docker and its dependecies
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - docker-ce 
        - docker-ce-cli 
        - containerd.io
      notify:
        - docker status

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        group: docker

    - name: Configure Docker Daemon
      become: true    
      shell: |
        mkdir -p /etc/docker

        cat <<EOF | sudo tee /etc/docker/daemon.json
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
          "storage-driver": "overlay2"
          }
        EOF
        systemctl restart docker

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet 
          - kubeadm 
          - kubectl

    - name: Configure node ip
      lineinfile:
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
        create: yes

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    - name: Get Images
      command: "{{ item }}"
      with_items:
        - kubeadm config images pull

    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --node-name {{ hostname }} --pod-network-cidr=192.168.0.0/16
      #command: kubeadm init --apiserver-advertise-address="{{ node_ip }}" --apiserver-cert-extra-sans="{{ node_ip }}"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16

    - name: Creates directory
      file:
        path: /home/ubuntu/.kube/
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: 0775
        recurse: yes

    - name: Copy config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        owner: ubuntu
        group: ubuntu
        mode: 0644
        remote_src: yes

    - name: Change kubeconfig file permission
      file:
        path: /home/ubuntu/.kube/config 
        owner: "{{ ansible_effective_user_id }}"
        group: "{{ ansible_effective_group_id }}"

    - name: Install calico pod network
      become: false
      command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml #https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/calico.yaml
  #
    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command
  #
    - name: Copy join command to local file
      become: false
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="join-command"

    - name: Copy join command remote to local file
      copy:
        src: join-command
        dest: .join-command
        mode: u+rw,g-wx,o-rwx

  handlers:
    - name: docker status
      service: name=docker state=started
